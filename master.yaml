AWSTemplateFormatVersion: "2010-09-09"

Description: >
  CloudFormation template for setting up a MemVerge.ai PoC environment with ALB integration. (Updated for unified node security group, fixed circular dependency)

Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for deploying resources

  SubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID for launching instances

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access

  AMIControlPlane:
    Type: AWS::EC2::Image::Id
    Default: ami-0c3b809fcf2445b6a
    Description: AMI ID for the Control Plane instance

  AMIWorkerNode:
    Type: AWS::EC2::Image::Id
    Default: ami-0c3b809fcf2445b6a
    Description: AMI ID for the Worker Node instance

  InstanceTypeControlPlane:
    Type: String
    Default: "m5.xlarge"
    Description: EC2 instance type for Control Plane (4 vCPUs, 16 GB RAM)

  InstanceTypeWorker:
    Type: String
    Default: "g5.2xlarge"
    Description: EC2 instance type for Worker Node (16 vCPUs, 32 GB RAM, 1 GPU)

  MemVergeVersion:
    Type: String
    Default: "0.3.1"
    Description: Version of MemVerge.ai Helm chart to install

  SubDomain:
    Type: String
    Description: Sub-domain for MemVerge.ai Load Balancer access

  WorkerNodeCount:
    Type: Number
    Default: 1
    Description: Number of worker nodes to create

  MemVergeGitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub token for accessing MemVerge Helm chart registry

  GitHubRepoPath:
    Type: String
    Default: "https://raw.githubusercontent.com/sscargal/mvai/main/"
    Description: GitHub repository path for script files

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0abcdef1234567890 # Example placeholder - ensure this is valid or remove if unused

Resources:
  # Unified Security Group for all nodes (Control Plane and Workers)
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Unified security group for Control Plane and Worker nodes"
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        # Rules allowing external access are defined here
        # Allow SSH from the Internet
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # Allow HTTP from the Internet
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # Allow HTTPS from the Internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # Self-referencing rule moved to a separate resource to avoid circular dependency
      Tags:
        - Key: Name
          Value: "MemVerge-Node-SG"

  # Separate Ingress rule to allow all traffic within the NodeSecurityGroup
  NodeSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NodeSecurityGroup           # Apply rule TO NodeSecurityGroup
      IpProtocol: "-1"                         # All protocols
      FromPort: -1                             # All ports
      ToPort: -1
      SourceSecurityGroupId: !GetAtt NodeSecurityGroup.GroupId # Allow traffic FROM NodeSecurityGroup

  # ALB Security Group remains unchanged
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ALB"
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "MemVerge-ALB-SG"

  MemVergeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MemVergeInstanceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SSMReadWriteAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/k3s/join-token"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:PutParameter
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/k3s/url"
        - PolicyName: EC2DescribeInstancesPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: "*"
        - PolicyName: CloudFormationDescribeTagsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeTags
                Resource: "*"
        - PolicyName: CloudFormationDescribeStacksPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: "*"

  MemVergeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: MemVergeInstanceProfile
      Roles:
        - !Ref MemVergeInstanceRole

  ControlPlaneInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceTypeControlPlane
      KeyName: !Ref KeyPairName
      SubnetId: !Ref SubnetID
      ImageId: !Ref AMIControlPlane
      SecurityGroupIds:
        - !Ref NodeSecurityGroup # Use the unified node security group
      IamInstanceProfile: !Ref MemVergeInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 60
      Tags:
        - Key: Name
          Value: "MemVerge-ControlPlane"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y
          apt install -y curl jq unzip
          curl -s ${GitHubRepoPath}controlplane.sh -o controlplane.sh
          chmod +x controlplane.sh
          export MEMVERGE_VERSION=${MemVergeVersion}
          export MEMVERGE_SUBDOMAIN=${SubDomain}
          export MEMVERGE_GITHUB_TOKEN=${MemVergeGitHubToken}
          export STACK_NAME=${AWS::StackName}
          export WORKER_NODE_COUNT=${WorkerNodeCount}
          ./controlplane.sh

  ControlPlaneEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ControlPlaneEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref ControlPlaneInstance
      EIP: !Ref ControlPlaneEIP

  WorkerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: memverge-worker-launch-template
      LaunchTemplateData:
        ImageId: !Ref AMIWorkerNode
        InstanceType: !Ref InstanceTypeWorker
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Name: !Ref MemVergeInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt update -y
            apt install -y curl
            curl -s ${GitHubRepoPath}worker.sh -o worker.sh
            chmod +x worker.sh
            ./worker.sh
        NetworkInterfaces:
          - AssociatePublicIpAddress: true
            DeviceIndex: 0
            SubnetId: !Ref SubnetID
            Groups:
              - !Ref NodeSecurityGroup # Use the unified node security group

  WorkerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref WorkerLaunchTemplate
        Version: !GetAtt WorkerLaunchTemplate.LatestVersionNumber
      MinSize: !Ref WorkerNodeCount
      MaxSize: !Ref WorkerNodeCount
      DesiredCapacity: !Ref WorkerNodeCount
      VPCZoneIdentifier:
        - !Ref SubnetID
      Tags:
        - Key: Name
          Value: "MemVerge-WorkerNode"
          PropagateAtLaunch: true
        - Key: kubernetes.io/cluster/memvergeai-cluster
          Value: owned
          PropagateAtLaunch: true
        - Key: kubernetes.io/role/internal-elb
          Value: "1"
          PropagateAtLaunch: true

Outputs:
  ControlPlanePublicIP:
    Description: Public IP of the Control Plane
    Value: !GetAtt ControlPlaneEIP.PublicIp

  NodeSecurityGroupID:
    Description: Security Group ID for Control Plane and Worker Nodes
    Value: !Ref NodeSecurityGroup

  ALBSecurityGroupID:
    Description: Security Group ID for ALB
    Value: !Ref ALBSecurityGroup

  ControlPlaneElasticIP:
    Description: Elastic IP of the Control Plane
    Value: !GetAtt ControlPlaneEIP.PublicIp

  ControlPlaneInstanceId:
    Description: Instance Id of the Control Plane
    Value: !Ref ControlPlaneInstance

